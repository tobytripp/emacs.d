;; -*- mode: emacs-lisp -*-
;;; org-init.el --- Load and compile org-mode init code, with separate path

(require 'ob-tangle)

(defgroup toby-org-init nil
  "Emacs configuration using `org-babel-load-file' while
  optionally keeping tangled/compiled sources in a separate
  path (to allow for easier vc ignore, etc.)."
  :tag "Babel")

(defcustom org-init-tangle-path (concat user-emacs-directory "org-lisp")
  "Path to tangle org-mode init files into."
  :group 'toby-org-init
  :version "25.1"
  :type '(directory))

(defcustom org-init-byte-compile t
  "If t, byte-compile tangled init code."
  :group 'toby-org-init
  :version "25.1"
  :type '(boolean))

;;;###autoload
(defun needed? (source target)
  "Returns non-nil iff SOURCE is newer than TARGET, nil
  otherwise."
  (let* ((age (lambda (file)
		(float-time
		 (time-subtract (current-time)
				(nth 5 (or (file-attributes (file-truename file))
					   (file-attributes file))))))))
    (or (not (file-exists-p target))
        (> (funcall age source)
           (funcall age target)))))


;;;###autoload
(defun toby/load-org-file (file)
  "Load Emacs Lisp source code blocks in the Org-mode FILE.
This function exports the source code using `org-babel-tangle'
and then loads the resulting file using `load-file'."
  (interactive "fFile to load: \nP")
  (let* ((base-name (file-name-base file))
         (export-path (file-name-as-directory org-init-tangle-path))
	 (exported-file (concat export-path base-name ".el")))
    (unless (file-directory-p export-path)
      (make-directory export-path))
    (message "Loading %s (%s)" file exported-file)
    (if (needed? file exported-file)
        (progn
          (message "Tangle %s -> %s" file exported-file)
          (org-babel-tangle-file file exported-file "emacs-lisp")))
    (load-file exported-file)
    (message "%s %s"
             (if org-init-byte-compile
                 (progn (byte-compile-file exported-file 'load)
                        "Compiled and loaded")
               (progn (load-file exported-file) "Loaded"))
             exported-file)))

;;;###autoload
(defun toby/babel-load-file (relative-path)
  "Load the given file using org-babel-load-file.  Path should be
     relative to lib-dir"
  (toby/load-org-file (expand-file-name relative-path org-init-source-path)))

;;;###autoload
(defun toby/org-init ()
  "Compile and load org-mode initializers."
  (interactive)
  (message "Loading %s" org-init-index-file)
  (toby/load-org-file org-init-index-file))

;;;###autoload
(defun toby/set-org-init (sym value)
  "Load the init file defined by `org-init-index-file'."
  (set-default sym value)
  (toby/org-init))

(defcustom org-init-index-file (concat user-emacs-directory "org-init/" "index.org")
  "The top-level init file.  This file will be loaded by `toby/org-init'."
  :group 'toby-org-init
  :set 'toby/set-org-init
  :version "25.1"
  :type '(file :must-match t))

(provide 'toby/org-init)
