#+TITLE:  Toby's Emacs Configuration
#+AUTHOR: Toby Tripp
#+EMAIL:  toby.tripp@gmail.com
#+OPTIONS: H:2 num:nil toc:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css"  href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />

* My Emacs Configuration

#+begin_quote
Emacs outshines all other editing software in approximately the same
way that the noonday sun does the stars. It is not just bigger and
brighter; it simply makes everything else vanish.

-- Neal Stephenson, "In the Beginning was the Command Line"
#+end_quote

Testing out a Literate emacs configuration.

Edit code snippets with <C-c '>

Load this configuration file using the function: =org-babel-load-file=

Export it to HTML with:
  C-c C-e h h     (org-html-export-to-html)

*** TODO Move init.org into lib-dir and load with stub init.el
*** TODO Take dotfiles-dir off the load-path and only load from lib-dir
*** TODO Keep the tangled elisp in a separate directory that is in .gitignore

** Who am I?

 #+BEGIN_SRC emacs-lisp
   (setq user-full-name "Toby Tripp"
         user-mail-address "toby.tripp@gmail.com")
 #+END_SRC

** Decorations

   Turn off tool-bars and scroll bars and other features I deem unnecessary.

   #+BEGIN_SRC emacs-lisp
     (if (fboundp 'tool-bar-mode)   (tool-bar-mode -1))
     (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
     (setq inhibit-splash-screen t)
   #+END_SRC

   Instead of a splash screen, let's start with the Bookmark List:
   #+BEGIN_SRC emacs-lisp
     (require 'bookmark)
     (bookmark-bmenu-list)
     (switch-to-buffer "*Bookmark List*")
   #+END_SRC

   Disable backup files.  That's what source-conrol is for.
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
     (setq auto-save-default nil)
   #+END_SRC

   Hide the fringe.
   #+BEGIN_SRC emacs-lisp
     (set-fringe-style 0)
   #+END_SRC

   Highlight the current line in the buffer.
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode 1)
   #+END_SRC

   Over-write selection to make things slightly less uncomfortable to
   others.
   #+BEGIN_SRC emacs-lisp
     (delete-selection-mode t)
   #+END_SRC

   Enable some features that the Emacs developers have deemed scary.
   #+BEGIN_SRC emacs-lisp
     (put 'ido-exit-minibuffer 'disabled nil)
     (put 'upcase-region       'disabled nil)
     (put 'narrow-to-region    'disabled nil)
     (put 'scroll-left         'disabled nil)
     (put 'set-goal-column 'disabled nil)
     (put 'downcase-region 'disabled nil)
   #+END_SRC

** Initialize Load Paths

 Add some directories to the load path so we can require files in them later.

 #+BEGIN_SRC emacs-lisp
   (defvar dotfiles-dir user-emacs-directory)
 #+END_SRC

 Make a path to add libraries installed from source.
 #+BEGIN_SRC emacs-lisp
   (defvar vendor-dir (concat dotfiles-dir "vendor/"))
   (add-to-list 'load-path vendor-dir)
 #+END_SRC

 Also create a place to put my various initialization hooks.
 #+BEGIN_SRC emacs-lisp
   (defvar lib-dir (concat dotfiles-dir "elisp/"))
   (add-to-list 'load-path lib-dir)
   (defvar org-lib-dir (concat dotfiles-dir "org-init/"))
   (add-to-list 'load-path org-lib-dir)
 #+END_SRC

** Change the Destination of Customization Settings

These are the settings saved from the customize menus and prompts within Emacs.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'noerror)
#+END_SRC

** Setup Environment Variables and Path

I keep these in a separate file to make it easy to find them.

#+BEGIN_SRC emacs-lisp
  (load "env.el")
#+END_SRC

** Install and Load Packages

#+BEGIN_SRC emacs-lisp
  (require 'init-packages)
#+END_SRC

*** TODO Missing Packages?
    These packages seem to be required to initialize but are missing
    from the package list.
    - flx-ido
    - js-comint
    - org
    - yasnippet
    - dired+

** Load Third-Party Libraries from =Vendor=

   First, load some libraries that are likely to be used in every session:
   - =uniquify= configures how buffer names are disambiguated
   - =ansi-color= supports translating ANSI color codes into Emacs faces
   - =recentf= allows for fast switching between recently edited files

   #+BEGIN_SRC emacs-lisp
     (require 'uniquify)
     (require 'ansi-color)
     (require 'recentf)
   #+END_SRC

   Then load anything we find in the =vendor= directory:
   #+BEGIN_SRC emacs-lisp
     (mapc (lambda (path)
          (add-to-list 'load-path (concat vendor-dir "/" path)))
        (directory-files vendor-dir nil "^[a-z]"))
   #+END_SRC

** Org-Babel

   Let's make it easy to tangle, load, and compile other configuration
   files written in org-mode.
   #+BEGIN_SRC emacs-lisp
     (require 'org-install)
     (require 'ob-tangle)

     (defun toby/babel-load-file (relative-path)
       "Load the given file using org-babel-load-file.  Path should be
     relative to lib-dir"
       (org-babel-load-file (expand-file-name relative-path org-lib-dir)))
   #+END_SRC

   Consider =byte-compile-directory=

   #+BEGIN_SRC emacs-lisp
     (defun toby/init-compile (&optional prefix-arg)
       "Tangle init files with org-babel and then compile them.

        Consider conditional compile while using the prefix argument
        to force compilation."
       (interactive "P")
       (mapc (lambda (file)
               (when (file-exists-p file)
                 (let ((el-file (concat (file-name-sans-extension file) ".el")))
                   (org-babel-tangle-file file el-file "emacs-lisp")
                   (byte-compile-file el-file))))
             (directory-files lib-dir t "^[^.].*[.]org$")))
   #+END_SRC

** Load Other Configurations

   First, pre-load some custom function definitions that may be used in my extensions.
   #+BEGIN_SRC emacs-lisp
   (require 'defuns)
   #+END_SRC

   Now, load every elisp file in the =lib= diectory.  Demote errors to
   warnings so that a problem in a particular extension doesn't bring
   start-up to a halt.
   #+BEGIN_SRC emacs-lisp
     ;; (with-demoted-errors
     ;;   (mapc #'load
     ;;         (mapcar 'file-name-sans-extension
     ;;                 (directory-files lib-dir nil ".*el$")))
     ;;   (message "Lib files loaded!"))

     (require 'emacs-hooks)
     (require 'defuns)

     (with-demoted-errors
       (mapc #'toby/babel-load-file
             (directory-files org-lib-dir nil ".*org$")))
   #+END_SRC

   Errors encountered while loading these libraries will show up in
   the Messages buffer after start-up.


*** TODO Create a Keybinding Help Page from Map Source

*** Toby Mode

    I push some keybindings and behaviors into my own minor mode so
    that, should I ever sit with an experienced Emacs user, we can
    turn them off easily.  This way Emacs can behave in a more
    “standard” way for a while.
    #+BEGIN_SRC emacs-lisp
    (require 'toby-mode)
    (global-toby-mode)
    #+END_SRC

** If Something Goes Wrong

   Sometimes it helps to launch the debugger when an error occurs.  By
   default, I've turned that off:
   #+BEGIN_SRC emacs-lisp
     (setq debug-on-error       nil)
   #+END_SRC

   to turn it on:
   #+BEGIN_SRC emacs-lisp :tangle no
     (setq debug-on-error       t)
   #+END_SRC
