#+SETUPFILE: ~/.emacs.d/org-init/level-0.orgsetup
* Clojure Customizations

** DONE Clojure + Cider Keybindings of Interest

   | Key-Chord | Command                           |
   | C-c C-x   | Reload the current namespace      |
   | C-c ,     | Run the current namespace's tests |
   | C-c M-,   | Run one test                      |
   | C-c C-,   | Re-run last test                  |
   | C-c C-e   | Eval and print last s-exp         |

** ADOPTED Clojure prettify-symbols

   - State "ADOPTED"    from "EXPERIMENTAL" [2018-02-23 Fri 10:02]
   - State "EXPERIMENTAL" from              [2017-08-07 Mon 11:42]

   #+BEGIN_SRC emacs-lisp
     (defvar toby/clojure-prettify-alist '())

     ;; (setq toby/clojure-prettify-alist '())
     (add-to-list 'toby/clojure-prettify-alist '("<="  . (?¬∑ (Br . Bl) ?‚â§)))
     (add-to-list 'toby/clojure-prettify-alist '(">="  . (?¬∑ (Br . Bl) ?‚â•)))
     (add-to-list 'toby/clojure-prettify-alist '("fn"  . 955))
     (add-to-list 'toby/clojure-prettify-alist '("->"  . 10230))
     (add-to-list 'toby/clojure-prettify-alist '("->>" . 10233))

     ;; (add-to-list 'toby/clojure-prettify-alist
     ;;              '("->>" .  (?\s (Br . Bl) ?\s (Br . Bl) ?\s
     ;;                              (Bl . Bl) ?- (Bc . Br) ?- (Bc . Bc) ?>
     ;;                              (Bc . Bl) ?- (Br . Br) ?>)))

     (eval-after-load 'clojure-mode
       '(setq clojure--prettify-symbols-alist
	      (append toby/clojure-prettify-alist
		      clojure--prettify-symbols-alist)))

     (eval-after-load 'lisp-mode
       '(setq lisp--prettify-symbols-alist
	      (if (boundp 'lisp--prettify-symbols-alist)
		  (append toby/clojure-prettify-alist
			  lisp--prettify-symbols-alist)
		toby/clojure-prettify-alist)))
   #+END_SRC

** Cider

   Set-up some local key-bindings.  This will pull in =clojure-mode= as well.

   #+BEGIN_SRC emacs-lisp
     (require-package 'clojure-mode "5.6.1" 'clojure-mode "clojure-mode")

     (defun toby/cider-onload ()
       ;; (require-package 'cider-eval-sexp-fu (version-to-list "1.1"))
       ;; (require 'cider-eval-sexp-fu)
       (define-key cider-mode-map (kbd "<f3>")    'cider-eval-defun-at-point)
       (define-key cider-mode-map (kbd "<f5>")    'toby/save-and-eval-buffer)
       (define-key cider-mode-map (kbd "<f12>")   'cider-test-run-tests)
       (define-key cider-mode-map (kbd "C-c C-e") 'cider-eval-print-last-sexp)
       (setq cider-mode-line '(:eval "üç∫")))

     (eval-after-load 'cider #'toby/cider-onload)

     (defun toby/cider-init ()
       (eldoc-mode 1)
       (toby/activate-structured-editing))
     (add-hook 'cider-mode-hook #'toby/cider-init)

     (defun toby/clj-repl-init ()
       (subword-mode 1)
       (toby/activate-structured-editing))

     (add-hook 'cider-repl-mode-hook #'toby/clj-repl-init)

     (defun toby/save-and-eval-buffer ()
       "Save open buffers and send the current buffer to the active
        Cider session."
       (interactive)
       (save-some-buffers 't)
       (cider-eval-buffer))
   #+END_SRC

** ClojureScript

   Enable CIDER-repl connections via figwheel:

   #+BEGIN_SRC emacs-lisp
     (setq cider-cljs-lein-repl
           "(do (require 'figwheel-sidecar.repl-api)
                (figwheel-sidecar.repl-api/start-figwheel!)
                (figwheel-sidecar.repl-api/cljs-repl))")
   #+END_SRC

** Clojure

*** REJECTED Clojure Refactorings

    - State "REJECTED"   from "ADOPTED"    [2018-07-11 Wed 12:18]
      - clj-refactor is not currently working
    - State "ADOPTED"    from    [2018-02-05 Mon 10:09]

    #+BEGIN_SRC emacs-lisp :tangle no
      (require-package 'clj-refactor "2.3.1" 'clj-refactor "clj-refactor-mode")
      (defun activate-refactor ()
        (clj-refactor-mode 1)
        (yas-minor-mode 1)
        (cljr-add-keybindings-with-prefix "C-c C-r"))

      (add-hook 'clojure-mode-hook #'activate-refactor)
    #+END_SRC

*** Set-up General Lisp Key-Bindings

**** EXPERIMENTAL Use Hydra instead

     - State "EXPERIMENTAL" from "TODO"       [2018-08-07 Tue 09:41]
     #+BEGIN_SRC emacs-lisp
       (require-package 'hydra)

       (defhydra hydra-clojure (:pre  (set-cursor-color "#40e0d0")
                                :post (set-cursor-color "#ffffff")
                                :hint nil)
         "
       ^S-Exp^                      ^Cider^
       ^^^^^^^^----------------------------------------------------
         ^_n_^                      _c_onnect
       _h_   _s_                    load _b_uffer
         ^_t_^                      _p_: eval and pprint last s-exp
       ‚Üí_(_‚Üí slurp)  (slurp ‚Üê_)_‚Üê   _e_val last s-exp
       ‚Üê_[_‚Üê barf)   (barf ‚Üí_]_‚Üí    _i_nspect last result
        _a_lign^                   ^_v_: test namespace
        un_w_rap

       _,_: insert comma
       "
         ("h" sp-backward-sexp)
         ("t" sp-down-sexp)
         ("n" sp-up-sexp)
         ("s" sp-forward-sexp)
         (")" sp-forward-slurp-sexp)
         ("(" sp-backward-slurp-sexp)
         ("]" sp-forward-barf-sexp)
         ("[" sp-backward-barf-sexp)
         ("w" sp-splice-sexp :color blue)

         ("a" clojure-align :color blue)

         ;; ("c" cider-connect-clj       :color blue)
         ("c" cider-connect               :color blue)
         ("b" cider-load-buffer           :color blue)
         ("p" cider-pprint-eval-last-sexp :color blue)
         ("e" cider-eval-last-sexp        :color blue)
         ("i" cider-inspect-last-result   :color blue)
         ("v" cider-test-run-ns-tests     :color blue)

         ("," (insert ",")      :color blue)
         ("q" nil "quit"        :color blue))
     #+END_SRC

*** Clojure Init

    #+BEGIN_SRC emacs-lisp
      (defun toby/clojure-init ()
        (toby/activate-structured-editing)

        (cider-mode 1)
        ;; (clj-refactor-mode 1)
        (yas-minor-mode 1)

        ;; Compojure Macros:
        (define-clojure-indent
          (defroutes 'defun)
          (defspec 'defun)
          (GET 2)
          (POST 2)
          (PUT 2)
          (DELETE 2)
          (HEAD 2)
          (ANY 2)
          (context 2)))

      (add-hook 'clojure-mode-hook #'toby/clojure-init)
    #+END_SRC

*** Clojuredocs

    #+BEGIN_SRC emacs-lisp
      (defconst clojuredocs-url "http://clojuredocs.org/")

      (defun clojuredocs-url (ns name)
        "Generate a clojuredocs search"
        (let ((base-url clojuredocs-url))
          (when (and name ns)
            (concat base-url ns "/" name))))

      (defun toby/clojuredocs-lookup (symbol)
        "Open the clojuredocs.org documentation for SYMBOL"
        (if-let ((var-info (cider-var-info symbol)))
            (let ((name (nrepl-dict-get var-info "name"))
                  (ns (nrepl-dict-get var-info "ns")))
              (browse-url (clojuredocs-url ns name)))
          (error "Symbol %s not resolved" symbol)))

      (defun toby/clojuredocs-web (&optional arg)
        "Open clojuredocs.org in the default web browser.

         Prompts for the symbol to look-up, or uses the symbol at point."
        (interactive "P")
        (funcall (cider-prompt-for-symbol-function arg)
                 "Clojuredoc for"
                 #'toby/clojuredocs-lookup))
    #+END_SRC

** On-Load

    #+BEGIN_SRC emacs-lisp
      (defun toby/clojure-onload ()
        (require-package 'cider "0.17.0" 'cider-mode "cider")
        (add-to-list 'package-pinned-packages '(cider . "melpa-stable") t)
        (define-key clojure-mode-map (kbd "<C-down>") 'forward-sexp)
        (define-key clojure-mode-map (kbd "<C-up>")   'backward-sexp)
        (define-key clojure-mode-map (kbd "C-c C-d o") 'toby/clojuredocs-web)
        (define-key clojure-mode-map "," 'hydra-clojure/body))

      (eval-after-load 'clojure-mode #'toby/clojure-onload)
    #+END_SRC


#+BEGIN_SRC emacs-lisp :exports none
(provide 'clojure-lang)
#+END_SRC
