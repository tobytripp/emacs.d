#+SETUPFILE: ~/.emacs.d/org-init/level-0.orgsetup
* General Emacs Configurations
** Path Utilities

   #+name: expand-path
   #+header: :results value
   #+header: :tangle no
   #+header: :var path="~/.emacs.d/bin/emacs-daemon"
   #+BEGIN_SRC emacs-lisp
     (file-truename path)
   #+END_SRC

   #+RESULTS: expand-path
   : /Users/toby/.emacs.d/bin/emacs-daemon

   #+name: which
   #+header: :results value
   #+header: :tangle no
   #+header: :var exe="emacsclient"
   #+BEGIN_SRC emacs-lisp
     (executable-find exe)
   #+END_SRC

   #+RESULTS: which
   : /usr/local/bin/emacsclient

** TODO Launchd Service [0/1]

   - [-] Start on-demand using a fixed Unix-Socket resource.
     - [X] Will require switching away from the =emacs-mac= port, but I think I'm
       okay with that.
     - [ ] Re-configure the plist to start on socket-access.

   #+name: Emacs LaunchAgent Configuration PList
   #+header: :noweb no-export
   #+header: :tangle ~/Library/LaunchAgents/org.thetripps.emacs.plist
   #+BEGIN_SRC xml
     <?xml version="1.0" encoding="UTF-8"?>
     <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
     <plist version="1.0">
       <dict>
         <key>Label</key>
         <string>org.thetripps.emacs</string>

         <key>EnvironmentVariables</key>
         <dict>
           <key>LANG</key>
           <string>en_US.UTF-8</string>
           <key>LC_ALL</key>
           <string>en_US.UTF-8</string>
         </dict>

         <key>WorkingDirectory</key>
         <string>/Users/toby</string>

         <key>ProgramArguments</key>
         <array>
           <string><<expand-path()>></string>
         </array>

         <key>RunAtLoad</key>
         <true />

         <key>StartCalendarInterval</key>
         <dict>
           <key>Hour</key>
           <integer>6</integer>
         </dict>

         <key>KeepAlive</key>
         <dict>
           <key>SuccessfulExit</key>
           <false />
         </dict>

         <key>StandardOutPath</key>
         <string>/var/log/agents.user/emacs.agent.log</string>

         <key>StandardErrorPath</key>
         <string>/var/log/agents.user/emacs.agent.log</string>
       </dict>
     </plist>
   #+END_SRC

   #+name: install agent
   #+header: :tangle ~/.emacs.d/bin/reload
   #+header: :tangle-mode (identity #o750)
   #+header: :shebang #!/bin/bash
   #+BEGIN_SRC sh
     launchctl unload ~/Library/LaunchAgents/org.thetripps.emacs.plist
     launchctl load   ~/Library/LaunchAgents/org.thetripps.emacs.plist
   #+END_SRC

   #+RESULTS: install agent
   :

   #+name: Service Status
   #+BEGIN_SRC sh :tangle no :results output list
     launchctl list | awk '/org.thetripps/ { print $0 }; /^PID/ { print $0 }'
   #+END_SRC

   #+RESULTS: Service Status
   : - PID	Status	Label
   : - -	0	org.thetripps.emacs
   : - -	0	org.thetripps.isync
   : - -	0	org.thetripps.trashdownloads

   Stop Emacs overnight to allow MacOS automatic updates to complete:



   #+name: StopEmacs LaunchAgent Configuration PList
   #+header: :noweb no-export
   #+header: :tangle ~/Library/LaunchAgents/org.thetripps.stopemacs.plist
   #+BEGIN_SRC xml
     <?xml version="1.0" encoding="UTF-8"?>
     <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
     <plist version="1.0">
       <dict>
         <key>Label</key>
         <string>org.thetripps.stopemacs</string>

         <key>ProgramArguments</key>
         <array>
           <string><<which("emacsclient")>></string>
           <string>-e</string>
           <string>'(kill-emacs)'</string>
         </array>

         <key>StartCalendarInterval</key>
         <dict>
           <key>Hour</key>
           <integer>1</integer>
         </dict>

         <key>StandardOutPath</key>
         <string>/var/log/agents.user/org.thetripps.stopemacs.log</string>

         <key>StandardErrorPath</key>
         <string>/var/log/agents.user/org.thetripps.stopemacs.log</string>
       </dict>
     </plist>
   #+END_SRC

** Client Start-up

   The following script will connect to the launchd daemon, if it exists, or
   create a new server otherwise:

   #+name: emacsclient-start-script
   #+header: :tangle ~/.emacs.d/bin/e
   #+header: :mkdirp yes
   #+header: :tangle-mode (identity #o755)
   #+header: :shebang #!/bin/bash
   #+BEGIN_SRC sh
     TARGET=${1:-~/}

     EMACS_PATH=/usr/local/bin
     EMACSCLIENT=${EMACS_PATH}/emacsclient

     $EMACSCLIENT -nc $TARGET
   #+END_SRC

** Emacs Server
   This sets it up such that, when =C-x k= is pressed, an active
   emacsclient session will be closed.  First, it clones any active
   local keymaps if they exist.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'server-switch-hook
               (lambda ()
                 (when (current-local-map)
                   (use-local-map (copy-keymap (current-local-map))))
                 (when server-buffer-clients
                   (local-set-key (kbd "C-x k") 'server-edit))))
   #+END_SRC

   Start the emacs server, if it isn't running already.
   #+BEGIN_SRC emacs-lisp
     (if (and (fboundp 'server-running-p)
              (not (server-running-p)))
         (progn
           ;; (setq server-socket-dir (concat user-emacs-directory "server"))
					 (setq server-name "toby")
           (server-start)))
   #+END_SRC

** Abbrev-Mode

   #+BEGIN_SRC emacs-lisp
     (setq abbrev-file-name "~/.emacs.d/abbrev_defs")
     (setq save-abbrevs t)
     (setq abbrev-mode t)
   #+END_SRC

** Tabs?!
   #+BEGIN_SRC emacs-lisp
   (setq tab-width 2)
   #+END_SRC

** Change "yes or no" to "y or n"

   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** UI
   Be less aggressive when vertically splitting my windows: (default 80)
   #+BEGIN_SRC emacs-lisp
   (setq split-height-threshold 110)
   #+END_SRC

   #+BEGIN_QUOTE
   Minimum height for splitting windows sensibly.
   If this is an integer, ‘split-window-sensibly’ may split a window
   vertically only if it has at least this many lines.
   #+END_QUOTE

** UTF-8

   #+BEGIN_SRC emacs-lisp
     (prefer-coding-system 'utf-8)
     (when (display-graphic-p)
       (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
   #+END_SRC

** Save Hooks
   I don't like it when =delete-trailing-whitespace= moves my cursor
   around when it finds I'm sitting on some white-space.  It just ends
   up kicking back my indentation for something I was just about to
   start typing.
   #+BEGIN_SRC emacs-lisp
     (defun toby/delete-trailing-whitespace ()
       "Ignore current line when deleting trailing whitespace"
       (interactive)
       (let ((first-part-start (point-min))
             (first-part-end   (point-at-bol))
             (second-part-start (point-at-eol))
             (second-part-end  (point-max)))
         (delete-trailing-whitespace first-part-start first-part-end)
         (delete-trailing-whitespace second-part-start second-part-end)))
   #+END_SRC

   Clean-up trailing white-space on save.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'toby/delete-trailing-whitespace)
   #+END_SRC

** Kill-Ring
   #+BEGIN_SRC emacs-lisp
     (require-package 'browse-kill-ring "20171219.11"
                      'browse-kill-ring-default-keybindings "browse-kill-ring")
     (browse-kill-ring-default-keybindings)
   #+END_SRC

** iSearch
   #+BEGIN_SRC emacs-lisp
     (require-package 'ag)
   #+END_SRC

** ADOPTED Multiple Cursors

   - State "ADOPTED"    from "REJECTED"   [2017-07-06 Thu 14:32]

   #+BEGIN_SRC emacs-lisp
     (require-package 'multiple-cursors)
     (autoload 'mc/edit-lines "multiple-cursors" "Multiple Cursors" t)

     (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

     (autoload 'mc/mark-next-like-this "multiple-cursors" "Multiple Cursors" t)
     (autoload 'mc/mark-previous-like-this "multiple-cursors" "Multiple Cursors" t)
     (autoload 'mc/mark-all-like-this "multiple-cursors" "Multiple Cursors" t)

     (global-set-key (kbd "C->") 'mc/mark-next-like-this)
     (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
     (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
   #+END_SRC

** Configuration

   #+BEGIN_SRC emacs-lisp
   (defun toby/reload-config ()
     "Reload ~/.emacs.d/init.el"
     (interactive)
     (load-file (concat user-emacs-directory "init.el")))

   (global-set-key (kbd "C-x x r") 'toby/reload-config)
   #+END_SRC

#+BEGIN_SRC emacs-lisp
(provide 'emacs-settings)
#+END_SRC
