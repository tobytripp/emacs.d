#+SETUPFILE: ~/.emacs.d/org-init/level-0.orgsetup
* Git Source Control

** Git Executable Path

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'exec-path "/usr/local/bin")
     (add-to-list 'exec-path (concat dotfiles-dir "bin"))
     (setenv "EDITOR" "/usr/local/bin/emacsclient")
   #+END_SRC

** Magit

   Probably the very best git front-end out there.

   I like it to open full-screen and then restore my windows where
   they were when it is done:

   #+BEGIN_QUOTE
   fullframe is an autoloaded Lisp macro in ‘fullframe.el’.

   (fullframe COMMAND-ON COMMAND-OFF &optional KILL-ON-COFF
   AFTER-COMMAND-ON-FUNC)

   Save window/frame state when executing COMMAND-ON.

   Advises COMMAND-ON so that the buffer it displays will appear in
   a full-frame window.  The previous window configuration will be
   restored when COMMAND-OFF is executed in that buffer.  If
   KILL-ON-COFF is non-nil, then the buffer will also be killed
   after COMMAND-OFF has completed.

   This function uses ‘defadvice’ on versions of emacs < 24.4,
   ‘advice-add’ otherwise.

   AFTER-COMMAND-ON-FUNC is called after COMMAND-ON was called and
   the window it generated is the only one in in the frame.
   #+END_QUOTE

   #+BEGIN_SRC emacs-lisp
     (require-package 'magit "20180401.0" 'magit-status "magit")
     (require-package 'fullframe)

     (eval-after-load "magit"
       '(progn
          (fullframe magit-status magit-mode-quit-window nil)
          (fullframe vc-annotate  quit-window)))
   #+END_SRC

*** =diff-hl= integration

    #+BEGIN_SRC emacs-lisp
    (require-package 'diff-hl)
    (autoload 'diff-hl-magit-post-refresh "diff-hl")
    #+END_SRC

*** Keybingings

    Quick one-button git status:

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "<f2>") 'magit-status)
    #+END_SRC

*** EXPERIMENTAL Snippets
    - State "EXPERIMENTAL" from              [2018-02-05 Mon 10:31]

    Snippet-ize git commit templates:

    #+BEGIN_SRC emacs-lisp
      (defun toby/update-tracker-id (&optional story-file)
        (interactive)

        (save-excursion
          (let* ((story-f  (if (consp story-file) story-file "../.story_id"))
                 (story-id (if (file-readable-p story-f)
                               (with-temp-buffer
                                 (insert-file-contents story-f)
                                 (goto-char (point-min))
                                 (re-search-forward "^\\(#[0-9]+\\)[[:space:]]*" nil)
                                 (replace-match (match-string 1))
                                 (buffer-string))
                             "")))
            (goto-char (point-min))
            (re-search-forward "_STORY_ID_" nil t)
            (replace-match story-id)))

        (yas-minor-mode-on)
        (goto-char (point-min))
        (forward-word 2)
        (yas-expand))
    #+END_SRC

** git-grep
   #+BEGIN_SRC emacs-lisp
     (defun git-grep-rb (regexp)
       "Run git-grep on ruby files in the current project"
       (interactive "sSearch for (regexp): ")
       (vc-git-grep regexp "'*.rb'" (textmate-project-root)))

     (defun git-grep (regexp)
       "Run git-grep on files in the current project"
       (interactive "sSearch for (regexp): ")
       (vc-git-grep regexp "'*.rb' '*.clj'" (textmate-project-root)))
   #+END_SRC

** vc-annotate

   Built-in to Emacs and really useful.  It allows you to not only
   view source control annotations, but also to move back and forward
   in time within the file.  Very nice.

   It's nicer, I think, when it ignores white-space:
   #+BEGIN_SRC emacs-lisp
     (defun vc-git-annotate-command (file buf &optional rev)
       (let ((name (file-relative-name file)))
         (vc-git-command buf 0 name "blame" "-w" rev)))
   #+END_SRC

#+BEGIN_SRC emacs-lisp
(provide 'git-tool)
#+END_SRC
