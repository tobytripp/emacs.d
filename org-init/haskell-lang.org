#+SETUPFILE: ~/.emacs.d/org-init/level-0.orgsetup
* Haskell Mode
  #+BEGIN_SRC emacs-lisp :exports none
    ;; -*- lexical-binding: t -*-
  #+END_SRC

** EXPERIMENTAL Auto-Keys
   :PROPERTIES:
   :exports:  code
   :END:

   #+tblname: haskell-key-bindings
   | key     | fn                             |
   |---------+--------------------------------|
   | C-c l   | haskell-process-load-file      |
   | C-;     | insert-arrow                   |
   | C-:     | insert-rocket                  |
   | C-=     | insert-larrow                  |
   | C-,     | haskell-move-nested-left       |
   | C-.     | haskell-move-nested-right      |
   | C-c C-c | haskell-compile                |
   | C-h h   | hoogle                         |
   | C-c C-z | haskell-interactive-switch     |
   | C-c C-t | haskell-process-do-type        |
   | C-c C-i | haskell-process-do-info        |
   | C-c C-c | haskell-process-cabal-build    |
   | C-c C-l | haskell-process-load-or-reload |

   #+name: define keys from alist
   #+BEGIN_SRC emacs-lisp
     (defun toby/do-define-key (map-var key->fun)
       "Call define-key with the given map, key spec, and target function."
       (let ((keys (kbd (car key->fun)))
             (func (cadr key->fun)))
         (message "map: %s" map-var)
         (global-unset-key keys)
         (define-key map-var keys (intern func))))
   #+END_SRC

   #+name: define keys from table
   #+BEGIN_SRC emacs-lisp
     (defun toby/define-key-table (mode-map key-table-alist)
       "Defines key-mapptings in `mode-map' for all rows in the
     org-babel :var `key-table-alist'"
       (let ((key-fn (apply-partially #'toby/do-define-key mode-map)))
         (mapcar key-fn key-table-alist)))
   #+END_SRC

   #+RESULTS: define keys from table
   : toby/define-key-table

   #+tblname: test-key-bindings
   | C-c u | beginning-of-buffer |
   | C-c d | end-of-buffer       |

   #+name: usage-example
   #+header: :var keys=test-key-bindings
   #+header: :results list
   #+header: :tangle no
   #+BEGIN_SRC emacs-lisp
     (toby/define-key-table *tobys-mode-map* keys)
   #+END_SRC

   #+RESULTS: usage-example
   - insert-arrow

   #+name: haskell-example
   #+header: :var keys=test-key-bindings
   #+header: :results list
   #+header: :tangle no
   #+BEGIN_SRC emacs-lisp
     (toby/define-key-table haskell-mode-map keys)
   #+END_SRC

   #+RESULTS: haskell-example
   - beginning-of-buffer
   - end-of-buffer

** Major Mode

   #+BEGIN_SRC emacs-lisp
     (require-package 'haskell-mode "20171022.0" 'haskell-mode)
   #+END_SRC

** Minor-Modes

   #+header: :var keys=haskell-key-bindings
   #+BEGIN_SRC emacs-lisp
     (eval-after-load 'haskell-mode
       '(progn
          (require-package 'smartparens)
          (require 'smartparens-config)
          (require 'haskell-process)
          (require 'haskell-interactive-mode)
          (toby/define-key-table haskell-mode-map keys)))
   #+END_SRC

*** EXPERIMENTAL Minor-Modes
    - State "EXPERIMENTAL" from "TODO"       [2018-03-12 Mon 10:40]

    - [[https://github.com/chrisdone/structured-haskell-mode][structured-haskell-mode]]
      - This one is starting to get on my nerves a bit to little benefit.  It
        tries to be like paredit for Haskell, but doesnâ€™t seem to handle
        literate-haskell very well.  Maybe turn it on conditionally only in
        non-literate mode?
    - [[http://commercialhaskell.github.io/intero/][intero]]
      - This one seems to be working out well.  The =stack= integration is
        especially nice.

    #+BEGIN_SRC emacs-lisp
      (defun toby/on-load-haskell ()
        (require-package 'shm)
        (require 'shm)
        (add-hook 'haskell-mode-hook 'structured-haskell-mode)

        (require-package 'flycheck-haskell)
        (require 'flycheck)
        (add-hook 'flycheck-mode-hook #'flycheck-haskell-setup)

        (require-package 'intero)
        (require 'intero)
        (intero-global-mode))

      (eval-after-load 'haskell-mode #'toby/on-load-haskell)
    #+END_SRC

** Hooks
   #+name: haskell-hooks
   #+BEGIN_SRC emacs-lisp
     (eval-after-load "haskell-cabal"
       '(define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-compile))

     (defun toby/haskell-init ()
       (turn-on-haskell-doc-mode)
       ;; Conflicts with structured-haskell-mode
       ;; (turn-on-haskell-indentation)

       (smartparens-strict-mode)
       (show-smartparens-mode t)

       (define-key haskell-mode-map (kbd "C-x C-d") nil)
       (define-key haskell-mode-map (kbd "C-c M-.") nil)
       (define-key haskell-mode-map (kbd "C-c C-d") nil))

     (add-hook 'haskell-mode-hook 'toby/haskell-init)
     (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
   #+END_SRC

** Text Functions

   #+BEGIN_SRC emacs-lisp
     (defun insert-arrow ()
       "Insert a single arrow (Haskell syntax)"
       (interactive)
       (delete-horizontal-space)
       (insert " -> "))

     (defun insert-larrow ()
       "Insert <- arrow (Haskell monad return)"
       (interactive)
       (delete-horizontal-space)
       (insert " <- "))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (provide 'haskell-lang)
   #+END_SRC
