#+SETUPFILE: ~/.emacs.d/org-init/level-0.orgsetup
* Haskell Mode
** EXPERIMENTAL Auto-Keys
   - State "EXPERIMENTAL" from "TODO"       [2018-03-04 Sun 01:05]

     + Keys
     #+tblname: haskell-key-bindings
     | key     | fn                            |
     |---------+-------------------------------|
     | C-c l   | inferior-haskell-load-and-run |
     | C-;     | insert-arrow                  |
     | C-:     | insert-rocket                 |
     | C-=     | insert-larrow                 |
     | C-,     | haskell-move-nested-left      |
     | C-.     | haskell-move-nested-right     |
     | C-c C-c | haskell-compile               |
     | C-h h   | hoogle                        |
     | C-c C-z | haskell-interactive-switch    |
     | C-c C-t | haskell-process-do-type       |
     | C-c C-i | haskell-process-do-info       |

     #+BEGIN_SRC haskell :tangle no
       module Main (main) where
       import SimpleJSON
       main = print (JObject [("foo", JNumber 1), ("bar", JBool False)])
     #+END_SRC

     #+name: define keys from table
     #+BEGIN_SRC emacs-lisp
       (defun toby/do-define-key (map-var key->fun)
         "Call define-key with the given map, key spec, and target function."
         (let ((keys (kbd (car key->fun)))
               (func (cadr key->fun)))
           (message "map: %s" map-var)
           (define-key map-var keys (intern func))))
     #+END_SRC

** Hooks
   #+name: haskell-hooks
   #+header: :noweb yes
   #+BEGIN_SRC emacs-lisp :exports code
     (require-package 'haskell-mode)
     (autoload 'haskell-mode "haskell-mode")
     (setq haskell-program-name "/usr/bin/ghci")

     (eval-after-load 'haskell-mode
       '(require-package 'smartparens))

     (eval-after-load "haskell-cabal"
       '(define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-compile))

     (defun toby/haskell-init ()
       (turn-on-haskell-doc-mode)
       (turn-on-haskell-indentation)

       (require 'smartparens-config)
       (smartparens-strict-mode)
       (show-smartparens-mode t)

       (mapcar (apply-partially #'toby/do-define-key haskell-mode-map) <<keys>>)

       (define-key haskell-mode-map (kbd "C-x C-d") nil)
       (define-key haskell-mode-map (kbd "C-c M-.") nil)
       (define-key haskell-mode-map (kbd "C-c C-d") nil))

     (add-hook 'haskell-mode-hook 'toby/haskell-init)
   #+END_SRC

** Text Functions

   #+BEGIN_SRC emacs-lisp
     (defun insert-arrow ()
       "Insert a single arrow (Haskell syntax)"
       (interactive)
       (delete-horizontal-space)
       (insert " -> "))

     (defun insert-larrow ()
       "Insert <- arrow (Haskell monad return)"
       (interactive)
       (delete-horizontal-space)
       (insert " <- "))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
(provide 'haskell)
   #+END_SRC
