#+SETUPFILE: ~/.emacs.d/org-init/level-0.orgsetup
* Javascript

** Node.js Set-up

   For REPLs and such, because actually writing server-side code in
   Javascript is insane.

   #+BEGIN_SRC emacs-lisp
   (setenv "NODE_PATH" "~/node_modules")
   (setq inferior-js-program-command "env NODE_NO_READLINE=1 node")
   #+END_SRC

   Mustache/handlebarl js support:

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
   #+END_SRC

** Js-Mode
*** Tern
    [[http://ternjs.net/doc/manual.html#emacs][Tern js plugin]]

    | key     | command            |
    |---------+--------------------|
    | M-.     | jump to def        |
    | M-,     | return from jump   |
    | C-c C-r | Rename variable    |
    | C-c C-c | Find type          |
    | C-c C-d | Find documentation |

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'load-path (concat vendor-dir "tern/emacs"))
      (autoload 'tern-mode "tern.el" nil t)

      (require-package 'company-tern)
      (add-to-list 'company-backends 'company-tern)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (require-package 'js-comint)

      (defun toby/js-init ()
        (glasses-mode t)
        (tern-mode t)
        (setq mode-name "Js"))

      (eval-after-load "js-mode"
        '(progn
           (add-hook 'js-mode-hook 'toby/js-init)
           (require 'js-comint)))

      (defun jslint-thisfile ()
        (interactive)
        (compile (format "jsl -process %s" (buffer-file-name))))

      ;; Ember handlebar templates
      (add-to-list 'auto-mode-alist '("\\.hbs$" . web-mode))
   #+END_SRC

#+BEGIN_SRC emacs-lisp
(provide 'javascript-init)
#+END_SRC
