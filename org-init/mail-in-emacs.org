#+SETUPFILE: ~/.emacs.d/org-init/level-0.orgsetup
* Mail with Emacs
  :PROPERTIES:
  :noweb:    no-export
  :exports:  code
  :END:
  #+BEGIN_SRC emacs-lisp :exports none
   ;; -*- lexical-binding: t -*-
  #+END_SRC

** Maintaining Secrets
*** GPG Encryption

    #+BEGIN_SRC emacs-lisp
    (require 'epa-file)
    (epa-file-enable)
    #+END_SRC

*** =auth-sources=
    :PROPERTIES:
    :tangle:   no
    :END:

    - [[elisp:(customize-variable 'auth-sources)][Customize auth-sources]]
    - To enable debug information:
      #+BEGIN_SRC emacs-lisp
        (setq auth-source-debug t)
      #+END_SRC
    - To clear the Emacs authentication cache:
      #+BEGIN_SRC emacs-lisp
        (auth-source-forget-all-cached)
      #+END_SRC
    - The current set of sources:
      #+name: current-sources
      #+BEGIN_SRC emacs-lispt :results list
        auth-sources
      #+END_SRC

      #+RESULTS: current-sources
      - ~/.emacs.d/secrets/.authinfo.gpg
      - macos-keychain-internet

*** Authentication Secret Look-up
    - Require the =auth-sources= library
      #+name: require-auth-source
      #+BEGIN_SRC emacs-lisp
        (require 'auth-source)
      #+END_SRC
    - =auth-sources= usage

      The =auth-source-search= function takes a “search spec” plist and
      returns a list with all matching entries.  The results themselves are
      plists containing full entries that matched the search spec.

      #+name: search-example
      #+BEGIN_SRC emacs-lisp :tangle no
        (auth-source-search :user "toby.tripp")
      #+END_SRC

      The =:secret= entry will be a lambda that, when evaluated,
      will return the password.

      #+name: parse-results-example
      #+BEGIN_SRC emacs-lisp :tangle no :results value
        (let* ((matches (auth-source-search
                         :user "toby.tripp"
                         :max 1
                         :require '(:secret)))
               (entry (nth 0 matches))
               (secret (plist-get entry :secret)))
          (list
           (list :user   (plist-get entry :user))
           (list :host   (plist-get entry :host))
           (list :port   (plist-get entry :port))
           (list :secret (funcall secret))))
      #+END_SRC

      #+RESULTS: parse-results-example
      | :user   | toby.tripp        |
      | :host   | example.server    |
      | :port   | 80                |
      | :secret | incredible-secret |

      We will define a function for returning a single =auth-sources= result as
      an =alist=:

      #+name: helper-definition
      #+BEGIN_SRC emacs-lisp
        (defun toby/auth-info (&rest search-spec)
          "Given a LOGIN to search for, return `auth-sources' that match.

        Valid search keys are:

          - :user
          - :host
          - :port

        Setting :max will have no result as this function only returns a
        single result.  If there are multiple matches, the first will be
        returned.

        Results are returned as an alist with the `:secret' property
        pre-evaluated."

          (dolist (default '((:max . 1) (:require . (:secret))))
            (plist-put search-spec (car default) (cdr default)))

          (let ((entry (nth 0 (apply 'auth-source-search search-spec))))
            (mapcar (lambda (e)
                      (let ((prop  (car e))
                            (value (if (functionp (cadr e))
                                       (funcall (cadr e))
                                     (cadr e))))
                        (cons prop value)))
                    (seq-partition entry 2))))
      #+END_SRC

      For example, given an =.authinfo= file containing:
      #+name: authinfo-example
      #+BEGIN_EXAMPLE
        machine example.server login toby.tripp port 80 password incredible-secret
      #+END_EXAMPLE

      and then the following call:

      #+name: call-example
      #+BEGIN_SRC emacs-lisp :tangle no :results verbatim
        (toby/auth-info :user "toby.tripp")
      #+END_SRC

      #+RESULTS: call-example
      : ((:host . "example.server") (:user . "toby.tripp") (:port . "80") (:secret . "incredible-secret"))

      We can then, for example, get just the password like this:

      #+name: getting-password
      #+BEGIN_SRC emacs-lisp :tangle no :results verbatim
        (alist-get :secret (toby/auth-info :user "toby.tripp"))
      #+END_SRC

      #+RESULTS: getting-password
      : "incredible-secret"

*** Secret Configurations

    Facilities for the evaluation of encrypted elisp configuration.

    #+name: secret-helper-definition
    #+BEGIN_SRC emacs-lisp
      (defun toby/get-secret-var (sym)
        "Get the value of the symbol `sym' from the custom.el.gpg
        customization/configuration file."
        (with-temp-buffer
          (insert-file-contents "~/.emacs.d/secrets/custom.el.gpg")
          (eval-buffer)
          (alist-get sym toby/secret-custom)))
    #+END_SRC

    #+name: get-secret
    #+header: :var property="gmail-user"
    #+BEGIN_SRC emacs-lisp
      (toby/get-secret-var (intern property))
    #+END_SRC

** ADOPTED mbsync
   :PROPERTIES:
   :tangle: ~/.mbsyncrc
   :tanble-mode: (identity #o640)
   :noweb: no-export
   :END:

   - State "EXPERIMENTAL" from "TODO"     [2018-02-13 Tue 07:25]
   - State "TODO"       from              [2018-02-13 Tue 07:25]

   - [[https://wiki.archlinux.org/index.php/Isync][ArchLinux Help Page]]
   - [[http://isync.sourceforge.net/mbsync.html][mbsync man page]]
   - [[http://pragmaticemacs.com/emacs/migrating-from-offlineimap-to-mbsync-for-mu4e/][Pragmatic Emacs mbsync Page]]

   #+header: :tangle-mode (identity #o640)
   #+BEGIN_SRC conf :tangle ~/.mbsyncrc
     # -*- mode: conf -*-
     Expunge Both
     SyncState *
   #+END_SRC

*** GMail
   :PROPERTIES:
   :tangle: ~/.mbsyncrc
   :tangle-mode: (identity #o640)
   :noweb: no-export
   :END:

    A script for retrieving encrypted authinfo
    #+name: gmail-password
    #+BEGIN_SRC sh :tangle no
      gpg2 -q --for-your-eyes-only --no-tty -d ~/.emacs.d/secrets/.authinfo.gpg | awk '/imap\.gmail/ { print $8 }'
    #+END_SRC

    The mbsync configuration for the gmail account
    #+name: gmail-account
    #+header: :noweb no-export
    #+BEGIN_SRC conf :tangle ~/.mbsyncrc
     IMAPAccount gmail
     Host imap.gmail.com
     Port 993
     User <<get-secret(property="gmail-user")>>
     AuthMechs LOGIN
     SSLType IMAPS
     SystemCertificates no
     CertificateFile /usr/local/etc/openssl/cert.pem
     PassCmd "<<gmail-password>>"

     IMAPStore gmail-remote
     Account gmail
    #+END_SRC

    Trailing slashes in mail directory entries are important.

    #+name: Gmail Maildir Storage
    #+BEGIN_SRC conf :tangle ~/.mbsyncrc
      MaildirStore gmail-local
      Path ~/.mail/gmail/
      Inbox ~/.mail/gmail/Inbox
      SubFolders Verbatim
    #+END_SRC

    Patterns match remote mail folders for syncing:

    #+tblname pattern-examples
    | Pattern | Meaning          |
    |---------+------------------|
    | *       | Match everything |
    | !DIR    | Exclude DIR      |
    | DIR     | Include DIR      |

    For example:
    #+name: gmail-patterns-example
    #+BEGIN_SRC conf :tangle no
      Patterns ![Gmail]* "[Gmail]/Sent Mail" "[Gmail]/Starred" "[Gmail]/All Mail"
    #+END_SRC

    #+name: Gmail Channels
    #+header: :tangle ~/.mbsyncrc
    #+BEGIN_SRC conf
      Channel gmail-inbox
      Master :gmail-remote:
      Slave :gmail-local:
      Patterns "INBOX" "Record*" "Group*"
      Create Both

      Channel gmail-trash
      Master :gmail-remote:"[Gmail]/Trash"
      Slave :gmail-local:trash
      Create Both
      Expunge Both

      Channel gmail-sent
      Master :gmail-remote:"[Gmail]/Sent Mail"
      Slave :gmail-local:sent
      Create Both
      Expunge Both

      Channel gmail-archive
      Master ":gmail-remote:[Gmail]/All Mail"
      Slave :gmail-local:archive
      Create Both
    #+END_SRC

    Groups put together Channels, so that we can invoke =mbsync= on a Group to
    sync all Channels, for instance: =mbsync gmail= gets mail from
    "gmail-inbox", "gmail-sent", and "gmail-trash"

    #+name: Gmail Groups
    #+header: :tangle ~/.mbsyncrc
    #+BEGIN_SRC conf
      Group gmail
      Channel gmail-inbox
      Channel gmail-sent
      Channel gmail-trash
      Channel gmail-archive
    #+END_SRC

    #+name: gmail-mailbox-list
    #+BEGIN_SRC sh :tangle no :results output
      mkdir -p ~/.mail/gmail
      mbsync -al
    #+END_SRC

*** iCloud
   :PROPERTIES:
   :tangle: ~/.mbsyncrc
   :tanble-mode: (identity #o640)
   :noweb: no-export
   :END:

    This configuration uses authentication info stored in the MacOS Keychain.
    I'm not convinced this is better or worse than authinfo.

    #+name: iCloud-Account
    #+header: :tangle ~/.mbsyncrc
    #+header: :noweb no-export
    #+BEGIN_SRC conf
      IMAPAccount icloud
      Host imap.mail.me.com
      Port 993
      User <<get-secret(property="icloud-user")>>
      PassCmd "security find-internet-password -s imap.mail.me.com -w"
      AuthMechs LOGIN PLAIN
      SSLType IMAPS
      SSLVersions TLSv1.2
      SystemCertificates no
      CertificateFile /usr/local/etc/openssl/cert.pem

      IMAPStore icloud-remote
      Account icloud
    #+END_SRC

    #+name: iCloud Maildir Storage
    #+header: :tangle ~/.mbsyncrc
    #+BEGIN_SRC conf
      MaildirStore icloud-local
      Path ~/.mail/icloud/
      Inbox ~/.mail/icloud/Inbox
      Trash Trash
    #+END_SRC

    #+name: iCloud Channels
    #+header: :tangle ~/.mbsyncrc
    #+BEGIN_SRC conf
      Channel icloud-folders
      Master :icloud-remote:
      Slave :icloud-local:
      Patterns "INBOX" "Saved" "Drafts" "Archive" "Sent*" "Trash"
      Create Both
      Expunge Both
      SyncState *
    #+END_SRC

    #+name: iCloud Groups
    #+header: :tangle ~/.mbsyncrc
    #+BEGIN_SRC conf
      Group icloud
      Channel icloud-folders
    #+END_SRC

    #+name: icloud-mailbox-list
    #+BEGIN_SRC sh :tangle no :results output
      mkdir -p ~/.mail/icloud
      mbsync -l icloud
    #+END_SRC

    #+RESULTS: icloud-mailbox-list
    : INBOX
    : Archive
    : Drafts
    : Sent Messages
    : Trash

** Under MacOS, this script can be triggered by =launchd= with the following plist:
   #+name: mail-sync-path
   #+header: :results value
   #+header: :tangle no
   #+BEGIN_SRC emacs-lisp
     (file-truename "~/bin/mail-sync")
   #+END_SRC

   #+RESULTS: absolute-path
   : /Users/toby/.emacs.d/bin/emacs-daemon


   #+name: mbsync plist
   #+header: :noweb no-export
   #+header: :tangle ~/Library/LaunchAgents/org.thetripps.isync.plist
   #+header: :tangle-mode (identity #o640)
   #+BEGIN_SRC xml
     <?xml version="1.0" encoding="UTF-8"?>
     <!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
     <plist version="1.0">
       <dict>
         <key>EnvironmentVariables</key>
         <dict>
           <key>PATH</key>
           <string>/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin</string>
         </dict>

         <key>KeepAlive</key>
         <false/>

         <key>Label</key>
         <string>org.thetripps.isync</string>

         <key>ProgramArguments</key>
         <array>
           <string><<mail-sync-path()>></string>
         </array>

         <key>StartInterval</key>
         <integer>300</integer>

         <key>RunAtLoad</key>
         <true />

         <key>StandardOutPath</key>
         <string>/var/log/agents.user/org.thetripps.isync.log</string>
         <key>StandardErrorPath</key>
         <string>/var/log/agents.user/org.thetripps.isync.log</string>
       </dict>
     </plist>
   #+END_SRC

   Note that an exit status of 78 indicates a configuration error.

   #+name: install agent
   #+BEGIN_SRC sh :tangle no :results output list
      launchctl unload ~/Library/LaunchAgents/org.thetripps.isync.plist
      launchctl load   ~/Library/LaunchAgents/org.thetripps.isync.plist
      launchctl list | awk '/org.thetripps/ { print $0 }; /^PID/ { print $0 }'
   #+END_SRC

   #+RESULTS: install agent
   : - PID	Status	Label
   : - -	78	org.thetripps.emacs
   : - 61991	0	org.thetripps.isync
   : - -	0	org.thetripps.trashdownloads


** ADOPTED Wanderlust

   - State "ADOPTED"    from "EXPERIMENTAL" [2018-02-23 Fri 10:01]
   - State "EXPERIMENTAL" from              [2018-02-09 Fri 21:21]

   #+BEGIN_SRC emacs-lisp
   (require-package 'wanderlust)
   #+END_SRC

*** Wanderlust Customization
    [2018-02-12 Mon]

    - [[elisp:(customize-group 'wl-folder)][Wanderlust Customize Folders]]
    - [[elisp:(customize-group 'wl-setting)][Wanderlust Customize Settings]]
    - [[elisp:(customize-group 'wl-summary)][Wanderlust Customize Summary]]
    - [[elisp:(customize-group 'wl-draft)][Wanderlust Customize Draft]]

*** Initialization

    - [[http://emacs-fu.blogspot.com/2009/06/e-mail-with-wanderlust.html][Wanderlust Blog Post]]

    #+name: wanderlust reader set-up
    #+BEGIN_SRC emacs-lisp
      (require 'mime-setup)
      (autoload 'wl       "wl"       "Wanderlust" t)
      (autoload 'wl-draft "wl-draft" "Write draft with Wanderlust." t)
      (autoload 'wl-expire-archive-date "wl-expire")

      (eval-after-load 'wl
        '(progn
           (setq
            elmo-maildir-folder-path "~/.mail"
            wl-stay-folder-window t                       ;; show the folder pane (left)
            wl-folder-window-width 25                     ;; toggle on/off with 'i'

            ;; hide many fields from message buffers
            wl-message-ignored-field-list '("^.*:")
            wl-message-visible-field-list
            '("^\\(To\\|Cc\\):"
              "^Subject:"
              "^\\(From\\|Reply-To\\):"
              "^Organization:"
              "^Message-Id:"
              "^Delivered-To:"
              "^\\(Posted\\|Date\\):"
              "^X-Keywords:")
            wl-message-sort-field-list
            '("^From"
              "^Organization:"
              "^X-Attribution:"
              "^Subject"
              "^Date"
              "^To"
              "^Cc"))

           (define-key mime-view-mode-default-map (kbd "C-c C-o") #'browse-url)))
    #+END_SRC
*** ADOPTED Searching Emails

    - State "EXPERIMENTAL" from              [2018-02-09 Fri 22:17]

    Search =mu= index by typing =g= in folder or summary.

    #+BEGIN_SRC emacs-lisp
      (require 'elmo-search)
      (elmo-search-register-engine
       'mu 'local-file
       :prog "/usr/local/bin/mu"
       :args '("find" pattern "--fields" "l")
       :charset 'utf-8)

      (setq elmo-search-default-engine 'mu)
    #+END_SRC

    [[http://www.djcbsoftware.nl/code/mu/cheatsheet.html][mu cheat-sheet]]

    Also =man mu-find=.

** ADOPTED Mail indexing with =mu=
   - State "EXPERIMENTAL" from              [2018-02-09 Fri 22:16]

   - [[https://emacs-fu.blogspot.com/2011/03/searching-e-mails-with-wanderlust-and.html][Emacs-Fu: Searching emails with wanderlust and mu]]

   - A sync script for use by the OS Scheduler:
     #+header: :tangle ~/bin/mail-sync
     #+header: :mkdirp yes
     #+header: :tangle-mode (identity #o750)
     #+header: :shebang #!/bin/bash
     #+name: mail-sync-script
     #+BEGIN_SRC sh
       exec &> >(while read line; do echo "$(date -R) $line"; done;)

       which -s mbsync
       if [[ $? -ne 0 ]]; then
           brew install isync
       fi

       which -s mu
       if [[ $? -ne 0 ]]; then
           brew install mu
       fi

       echo Mail Sync &&
           mbsync -Va &&
           echo Mail Index &&
           mu index --maildir=~/.mail --lazy-check
     #+END_SRC

** ADOPTED =org-capture= Integration

   - State "EXPERIMENTAL" from              [2018-02-10 Sat 07:01]

   #+name: define-capture-keys
   #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "<f3>"))
     (global-set-key (kbd "<f3>") 'wl)

     (defun toby/load-wl ()
       (require 'org-wl)
       (fullframe wl bury-buffer nil))

     (eval-after-load 'wl #'toby/load-wl)

     (defun toby/mail-init ()
       (define-key wl-folder-mode-map (kbd "q") 'bury-buffer)
       (define-key wl-folder-mode-map (kbd "Q") 'wl-exit))

     (add-hook 'wl-hook #'toby/mail-init)
   #+END_SRC

   #+RESULTS: define-capture-keys
   | toby/mail-init |

   - [X] Figure out how to auto-load this package on wanderlust init
     - the approach in [[*BBDB for Contacts][BBDB for Contacts]] would probably work

   With this, you can mark text in a Wanderlust email view and type =C-c c e=
   to create an =org= node with the marked contents.  Meta-data about the
   current email will automatically be included.

*** Starting Up for Reading

    =M-x wl=

** ADOPTED Setting wanderlust as the Emacs Mail composer

   - State "ADOPTED"    from "EXPERIMENTAL" [2018-02-28 Wed 20:41]
   - State "EXPERIMENTAL" from              [2018-02-10 Sat 22:42]

   Open a message for writing with =wl-draft=

   #+name: wanderlust composition set-up
   #+BEGIN_SRC emacs-lisp
     (autoload 'wl-user-agent-compose "wl-draft" nil t)
     (if (boundp 'mail-user-agent)
         (setq mail-user-agent 'wl-user-agent))

     (if (fboundp 'define-mail-user-agent)
         (define-mail-user-agent
           'wl-user-agent
           'wl-user-agent-compose
           'wl-draft-send
           'wl-draft-kill
           'mail-send-hook))
   #+END_SRC

*** ADOPTED Try GMail for SMTP

    - State "ADOPTED"    from "TODO"       [2018-02-28 Wed 20:39]

    #+tblname: GMail IMAP Settings
    |-----------------------------+-----------------------+-------|
    | Incoming Mail (IMAP) Server |        imap.gmail.com |       |
    |-----------------------------+-----------------------+-------|
    |                             |                   <r> | <5>   |
    |                             |         Requires SSL: | Yes   |
    |                             |                 Port: | 993   |
    |-----------------------------+-----------------------+-------|
    | Outgoing Mail (SMTP) Server |        smtp.gmail.com |       |
    |-----------------------------+-----------------------+-------|
    |                             |                   <r> |       |
    |                             |          Requires SSL | Yes   |
    |                             |          Requires TLS | Yes[fn:tls] |
    |                             |          Port for SSL | 465   |
    |                             | Port for TLS/STARTTLS | 587   |

    #+name: smtp-set-up
    #+BEGIN_SRC emacs-lisp
       (let* ((smtp-server (toby/get-secret-var 'smtp-server))
              (smtp-config (toby/auth-info :host smtp-server)))
         (setq wl-smtp-authenticate-type "plain"
               wl-smtp-posting-server    (alist-get :host smtp-config)
               wl-smtp-posting-port      (alist-get :port smtp-config)
               wl-smtp-posting-user      (alist-get :user smtp-config)
               wl-from           (toby/get-secret-var 'toby/mail-from)
               wl-smtp-connection-type   (quote ssl)))
    #+END_SRC

    #+RESULTS: smtp-set-up
    : ssl

*** TODO BBDB for Contacts [0/1]
    - State "ADOPTED"    from "EXPERIMENTAL" [2018-03-01 Thu 12:33]
    - State "EXPERIMENTAL" from "TODO"       [2018-02-21 Wed 12:46]
    - State "TODO"       from              [2018-02-21 Wed 12:46]

    - Referenced
      - [[https://www.emacswiki.org/emacs/CategoryBbdb][Emacs Wiki Entry]]
      - [[http://bbdb.sourceforge.net/bbdb.html][BBDB Manual]]
      - [[https://emacs-fu.blogspot.com/2009/08/managing-e-mail-addresses-with-bbdb.html][Emacs-Fu Blog Entry]]

    - [ ] [[https://www.emacswiki.org/emacs/BBDBV3-Wl][BBDB Wanderlust Integration]]
      - [ ] “BBDB: MUA ‘mime-view-mode’ Not Supported”
        - [[bbdb-init][bbdb-init]] some change (it's unclear which) fixed this
        - [ ] Turns out that it didn't There is a problem with the hook in
          =wl-message-redisplay-hook=, currently set to:
          =bbdb-mua-auto-update=.  This function appears unable or unwilling
          to parse the headers from a message viewed with
          =mime-view-mode=. [[http://savannah.nongnu.org/git/?group=bbdb][BBDB Source Repo]].


    #+NAME: bbdb-init
    #+BEGIN_SRC emacs-lisp
      (require-package 'bbdb (version-to-list "3.2"))
      (eval-after-load 'wl
        '(progn
           (require 'bbdb-wl)
           (bbdb-initialize 'wl)
           (bbdb-insinuate-wl)
           (bbdb-mua-auto-update-init 'wl)))
    #+END_SRC

** Package Declaration Here
   #+BEGIN_SRC emacs-lisp
     (provide 'mail-in-emacs)
   #+END_SRC

*** Archive                                                         :ARCHIVE:
**** REJECTED Configure OAuth2 Authentication
     :PROPERTIES:
     :ARCHIVE_TIME: 2018-03-03 Sat 23:44
     :END:
     - State "TODO"       from "EXPERIMENTAL" [2018-02-10 Sat 12:11]
     - State "EXPERIMENTAL" from              [2018-02-10 Sat 12:11]

     [[https://hobo.house/2017/07/17/using-offlineimap-with-the-gmail-imap-api/][Using Offlineimap with the Gmail IMAP API]] <2018-02-10 Sat 12:13>

**** REJECTED OfflineIMAP
     :PROPERTIES:
     :ARCHIVE_TIME: 2018-02-23 Fri 08:26
     :END:
     - State "REJECTED"   from "EXPERIMENTAL" [2018-02-21 Wed 16:49]
     - State "EXPERIMENTAL" from              [2018-02-10 Sat 22:54]
***** TODO .offlineimaprc

      - State "TODO"       from              [2018-02-10 Sat 22:56]

      This config file should probably be managed in this repo (where it is
      used) rather in dotfiles.

** Footnotes

[fn:tls]  If available


