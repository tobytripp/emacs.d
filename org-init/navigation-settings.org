#+SETUPFILE: ~/.emacs.d/org-init/level-0.orgsetup
* Navigation

** Dired

   |---------------+---------------------------------------|
   | Keystroke     | Command                               |
   |---------------+---------------------------------------|
   | C-x d         | Open Dired                            |
   | C-x d <REGEX> | Open Dired filterd by REGEX           |
   | (             | Toggle details                        |
   | A             | Search marked file                    |
   | B             | Byte-compile elisp files              |
   | D             | Delete marked files                   |
   | L             | Load elisp files                      |
   | Q             | Query Replace in marked entries       |
   | R             | Rename                                |
   | T             | Touch marked files                    |
   | X             | Shell Command on files                |
   | Z             | Compress marked files                 |
   | ^             | Go up a directory                     |
   | <             | Previous Dir (in this buffer)         |
   | >             | Next Dir                              |
   | c             | Copy marked files                     |
   | g             | Read all dirs aGain                   |
   | i             | Insert subdirectory into this listing |
   | C-u u         | Un-insert                             |
   | m             | Mark an entry                         |
   | s             | Symlink marked files                  |
   | t             | Toggle marks                          |
   | u             | Unmark file                           |
   | U             | Unmark all files                      |
   | : d           | Decrypt                               |
   | : e           | Encrypt                               |

   Also great is the =wdired= command, which creates a =dired= listing
   that can be edited and saved. This makes for easy renames and file
   mode changes.

*** Dired Extensions

    Built-in:

    #+BEGIN_SRC emacs-lisp
      (require 'dired-x)
    #+END_SRC

*** REJECTED dired-hacks
    - State "REJECTED"   from "EXPERIMENTAL" [2018-04-17 Tue 15:04]
    - State "EXPERIMENTAL" from "TODO"       [2018-03-15 Thu 18:58]

    #+BEGIN_SRC emacs-lisp :tangle no
      (require-package 'dired-subtree)
      (require 'dired-subtree)
      (if (fboundp 'dired-subtree-insert)
          (define-key dired-mode-map (kbd "i") #'dired-subtree-insert))
      (if (fboundp 'dired-subtree-remove)
          (define-key dired-mode-map (kbd ";") #'dired-subtree-remove))
    #+END_SRC

    #+RESULTS:
    : dired-subtree
*** REJECTED neotree

    - State "REJECTED"   from "EXPERIMENTAL" [2018-07-26 Thu 14:04]
    - State "EXPERIMENTAL" from              [2018-03-24 Sat 11:32]

      #+BEGIN_SRC emacs-lisp
        (require-package 'neotree)
      #+END_SRC

      #+RESULTS:

** Projectile
   One important note about =projectile= and =flx=: their matching is
   /aggressive/.  This is a nice feature most of the time, except when
   you want to open a new file.  They'll eagerly find you some
   file–any file–that matches the name you're trying to enter.  So, to
   turn this off temporarily press: =C-f=.

   #+BEGIN_SRC emacs-lisp
     (require-package 'f) ;; undeclared dependency?
     (require-package 'projectile)

     (projectile-global-mode t)

     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
     (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)

     (global-set-key   (kbd "C-x f") 'projectile-find-file)

     (def-projectile-commander-method ?j
       "Jack-in."
       (let* ((opts (projectile-current-project-files))
              (file (ido-completing-read
                     "Find file: "
                     opts
                     nil nil nil nil
                     (car (cl-member-if
                           (lambda (f)
                             (string-match "core\\.clj\\'" f))
                           opts)))))
         (find-file (expand-file-name
                     file (projectile-project-root)))
         (run-hooks 'projectile-find-file-hook)
         (cider-jack-in)))
   #+END_SRC

   The default mode-line “lighter” for Projectile Mode is:

   #+BEGIN_SRC elisp :tangle no
   (:eval
     (format " Projectile[%s]" (projectile-project-name)))
   #+END_SRC

   That's a bit much for me; I like things minimal. So, I reset it to be blank:

   #+BEGIN_SRC elisp
     (setq projectile-mode-line nil)
   #+END_SRC

** Command Completion
** ADOPTED Which-Key Mode

   - State "ADOPTED"    from "REJECTED"   [2017-07-06 Thu 14:31]
   - State "REJECTED"   from "EXPERIMENTAL" [2017-07-06 Thu 14:31]
   - State "EXPERIMENTAL" from              [2017-07-06 Thu 14:31]

   After a short pause, displays command key hints in the mini-buffer.
   #+BEGIN_SRC emacs-lisp
     (require-package 'which-key)
     (which-key-mode)
   #+END_SRC
** Hydra
   #+BEGIN_SRC emacs-lisp
     (require-package 'hydra "0.14.0")
   #+END_SRC
*** Buffer-Menu

    - State "EXPERIMENTAL" from "REJECTED"   [2018-08-16 Thu 10:37]
    - State "REJECTED"   from "ADOPTED"    [2018-08-16 Thu 10:37]
    - State "ADOPTED"    from              [2018-08-16 Thu 10:37]
    - State "ADOPTED"    from              [2018-08-16 Thu 10:37]
    #+BEGIN_SRC emacs-lisp
      (defhydra hydra-buffer-menu (:color pink
                                   :hint nil)
        "
      ^Mark^             ^Unmark^           ^Actions^          ^Search
      ^^^^^^^^-----------------------------------------------------------------                        (__)
      _m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch                         (oo)
      _s_: save          _U_: unmark up     _b_: bury          _I_: isearch                      /------\\/
      _d_: delete        ^ ^                _g_: refresh       _O_: multi-occur                 / |    ||
      _D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only^^    *  /\\---/\\
      _~_: modified      ^ ^                ^ ^                ^^                                 ~~   ~~
      "
        ("m" Buffer-menu-mark)
        ("u" Buffer-menu-unmark)
        ("U" Buffer-menu-backup-unmark)
        ("d" Buffer-menu-delete)
        ("D" Buffer-menu-delete-backwards)
        ("s" Buffer-menu-save)
        ("~" Buffer-menu-not-modified)
        ("x" Buffer-menu-execute)
        ("b" Buffer-menu-bury)
        ("g" revert-buffer)
        ("T" Buffer-menu-toggle-files-only)
        ("O" Buffer-menu-multi-occur :color blue)
        ("I" Buffer-menu-isearch-buffers :color blue)
        ("R" Buffer-menu-isearch-buffers-regexp :color blue)
        ("c" nil "cancel")
        ("v" Buffer-menu-select "select" :color blue)
        ("o" Buffer-menu-other-window "other-window" :color blue)
        ("q" quit-window "quit" :color blue))

      (define-key Buffer-menu-mode-map "." 'hydra-buffer-menu/body)
    #+END_SRC

    #+RESULTS:
    : hydra-buffer-menu/body
*** Rectangles

    #+BEGIN_SRC emacs-lisp
      (require 'rect)
      (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                 :color pink
                                 :post (deactivate-mark))
        "
        ^_k_^     _d_elete    _s_tring
      _h_   _l_   _o_k        _y_ank
        ^_j_^     _n_ew-copy  _r_eset
      ^^^^        _e_xchange  _u_ndo
      ^^^^        ^ ^         _p_aste
      "
        ("h" rectangle-backward-char nil)
        ("l" rectangle-forward-char nil)
        ("k" rectangle-previous-line nil)
        ("j" rectangle-next-line nil)
        ("e" hydra-ex-point-mark nil)
        ("n" copy-rectangle-as-kill nil)
        ("d" delete-rectangle nil)
        ("r" (if (region-active-p)
                 (deactivate-mark)
               (rectangle-mark-mode 1)) nil)
        ("y" yank-rectangle nil)
        ("u" undo nil)
        ("s" string-rectangle nil)
        ("p" kill-rectangle nil)
        ("o" nil nil))

      (global-set-key (kbd "C-x SPC") 'hydra-rectangle/body)
    #+END_SRC

    #+RESULTS:
    : hydra-rectangle/body

*** Org Agenda

    #+BEGIN_SRC emacs-lisp
      (defun org-agenda-cts ()
        (and (eq major-mode 'org-agenda-mode)
             (let ((args (get-text-property
                          (min (1- (point-max)) (point))
                          'org-last-args)))
               (nth 2 args))))

      (eval-after-load 'org-agenda
        '(progn
           (defhydra hydra-org-agenda-view (:hint none)
             "
      _d_: ?d? day        _g_: time grid=?g?  _a_: arch-trees
      _w_: ?w? week       _[_: inactive       _A_: arch-files
      _t_: ?t? fortnight  _f_: follow=?f?     _r_: clock report=?r?
      _m_: ?m? month      _e_: entry text=?e? _D_: include diary=?D?
      _y_: ?y? year       _q_: quit           _L__l__c_: log = ?l?"
             ("SPC" org-agenda-reset-view)
             ("d" org-agenda-day-view (if (eq 'day (org-agenda-cts)) "[x]" "[ ]"))
             ("w" org-agenda-week-view (if (eq 'week (org-agenda-cts)) "[x]" "[ ]"))
             ("t" org-agenda-fortnight-view (if (eq 'fortnight (org-agenda-cts)) "[x]" "[ ]"))
             ("m" org-agenda-month-view (if (eq 'month (org-agenda-cts)) "[x]" "[ ]"))
             ("y" org-agenda-year-view (if (eq 'year (org-agenda-cts)) "[x]" "[ ]"))
             ("l" org-agenda-log-mode (format "% -3S" org-agenda-show-log))
             ("L" (org-agenda-log-mode '(4)))
             ("c" (org-agenda-log-mode 'clockcheck))
             ("f" org-agenda-follow-mode (format "% -3S" org-agenda-follow-mode))
             ("a" org-agenda-archives-mode)
             ("A" (org-agenda-archives-mode 'files))
             ("r" org-agenda-clockreport-mode (format "% -3S" org-agenda-clockreport-mode))
             ("e" org-agenda-entry-text-mode (format "% -3S" org-agenda-entry-text-mode))
             ("g" org-agenda-toggle-time-grid (format "% -3S" org-agenda-use-time-grid))
             ("D" org-agenda-toggle-diary (format "% -3S" org-agenda-include-diary))
             ("!" org-agenda-toggle-deadlines)
             ("[" (let ((org-agenda-include-inactive-timestamps t))
                    (org-agenda-check-type t 'timeline 'agenda)
                    (org-agenda-redo)
                    (message "Display now includes inactive timestamps as well")))
             ("q" (message "Abort") :exit t)
             ("v" nil))

           (define-key org-agenda-mode-map "v" 'hydra-org-agenda-view/body)))
    #+END_SRC

*** Smart-Parens

    #+BEGIN_SRC emacs-lisp
      (eval-after-load 'smartparens-mode
        '(progn
           (defhydra hydra-parens (:color pink)
             "
           ^Navigate^       ^Kill^       ^Manipulate^          ^Select^
           ^^^^^^^^^^^^-----------------------------------------------------------
             ^_u_^          _k_ill       _t_ranspose           _n_arrow to sexp
           _a_ _b_ _f_ _e_  _w_: copy    _p_ush                _C-w_: select sexp
             ^_d_^          _s_plice     _)_: forward-slurp    _m_: mark sexp
                            _S_plit      _C-)_: slurp-hybrid   _ _: ok
                            _j_oin       _(_: backward-slurp
                            _D_: clone   _}_: forward-barf
                                         _{_: backward-barf
                                         _;_: comment sexp
           "
             ("f"   sp-forward-sexp         "forward")
             ("b"   sp-backward-sexp        "backward")
             ("a"   sp-beginning-of-sexp    "beginning")
             ("e"   sp-end-of-sexp          "end")
             ("u"   sp-up-sexp              "up")
             ("d"   sp-down-sexp            "down")

             ("k"   sp-kill-sexp            "kill")
             ("w"   sp-copy-sexp            "copy")
             ("s"   sp-splice-sexp          "splice")
             ("S"   sp-split-sexp           "split")
             ("j"   sp-join-sexp            "join")
             ("D"   sp-clone-sexp           "clone")

             ("t"   sp-transpose-sexp       "transpose")
             ("p"   sp-push-hybrid-sexp     "push")
             (")"   sp-forward-slurp-sexp   "()<-slurp")
             ("C-)" sp-slurp-hybrid-sexp    "slurp hybrid")
             ("("   sp-backward-slurp-sexp  "slurp->()")
             ("}"   sp-forward-barf-sexp    "(barf)->")
             ("{"   sp-backward-barf-sexp   "<-(barf)")
             (";"   sp-comment              "comment")

             ("n"   sp-narrow-to-sexp       "narrow")
             ("C-w" sp-select-next-thing    "select")
             ("m"   sp-mark-sexp            "mark")
             (" " nil                       "ok"))

           (global-unset-key (kbd "C-."))
           (global-unset-key (kbd "C-,"))
           (define-key flyspell-mode-map (kbd "C-.") nil)
           (define-key flyspell-mode-map (kbd "C-,") nil)

           (define-key smartparens-mode-map (kbd "C-.") 'hydra-parens/body)))
    #+END_SRC

    #+RESULTS:

*** Global Hydra

    #+BEGIN_SRC emacs-lisp
      (defun toby/save-windows ()
        (interactive)
        (save-some-buffers 't)
        (window-configuration-to-register ?w))
      (defun toby/reload-windows ()
        (interactive)
        (jump-to-register ?w))
      (defun toby/fullframe-window ()
        (interactive)
        (toby/save-windows)
        (delete-other-windows))

      (defun toby/split-right ()
        (interactive)
        (split-window-right)
        (set-window-columns))

      (defhydra hydra-global (:hint nil)
        "
      ^Window^              ^Split^         ^Re-size^
      ^^^---------------------------------------------
      save _w_indow config  _-_ horizontal    ^_n_^
      _l_oad config         _|_ vertical    ^_h_ _x_ _s_
      _f_ullframe window                    ^_t_^

      ^Util^
      --------------
      _c_heck spelling

      "
        ("w" toby/save-windows     :color blue)
        ("l" toby/reload-windows   :color blue)
        ("f" toby/fullframe-window :color blue)

        ("-" split-window-below    :color blue)
        ("|" toby/split-right      :color blue)

        ("h" enlarge-window-horizontally)
        ("n" enlarge-window)
        ("t" shrink-window)
        ("s" shrink-window-horizontally)
        ("x" shrink-window-if-larger-than-buffer)

        ("c" ispell-word :color blue)

        ("q" nil "exit" :color blue))

      (global-unset-key (kbd "<f8>"))
      (global-set-key (kbd "<f8>") 'hydra-global/body)
    #+END_SRC
** ADOPTED Ivy + Counsel + Swiper

   - State "ADOPTED"    from "REJECTED"   [2018-08-14 Tue 13:02]
   - State "EXPERIMENTAL" from "TODO"       [2018-04-03 Tue 08:15]
   - [[https://github.com/abo-abo/swiper][GitHub Page]]

   #+BEGIN_SRC emacs-lisp
     (require-package 'ivy "0.10.0" 'ivy-mode "ivy")
     (require-package 'counsel "20180328.0" 'counsel-mode "counsel")
     (ivy-mode 1)

     (eval-after-load 'ivy
       '(progn
          (require-package 'ivy-hydra "20180208.912")
          (require 'ivy-hydra)
          (counsel-mode 1)
          (setq ivy-use-virtual-buffers t)
          (setq enable-recursive-minibuffers nil)
          (global-set-key (kbd "C-c C-r") 'ivy-resume)
          (global-set-key (kbd "M-x")  'counsel-M-x)
          (global-set-key (kbd "<f6>") 'ivy-switch-buffer)

          ;; Prevent TAB from selecting only candidate
          (define-key ivy-minibuffer-map (kbd "TAB") 'ivy-partial)

          ;; Search+yank default emacs binding
          (define-key ivy-minibuffer-map (kbd "C-w") 'ivy-yank-word)

          (setq magit-completing-read-function 'ivy-completing-read)
          (setq projectile-completion-system 'ivy)

          (global-set-key "\C-s" 'swiper)
          (setq ivy-re-builders-alist
                '((swiper . ivy--regex)
                  (t . ivy--regex-plus)))
          ))
   #+END_SRC

   - How to do what C-w does in Isearch?
     #+BEGIN_QUOTE
     In Isearch, pressing =C-w= will insert the word-at-point into the
     minibuffer.

     The same can be done in Ivy with =M-j= =(ivy-yank-word)= for any
     command, not just swiper.

     On a related note, you can paste symbol-at-point into the search with
     =M-n=, which is a common case for using =C-w= in Isearch.
     #+END_QUOTE

   - How to complete a selection even though it doesn’t have a match?

     #+BEGIN_QUOTE
     Press =C-M-j=
     #+END_QUOTE



** Open Recent Files
   Enable “Open Recent” and give it a keybinding:
   #+BEGIN_SRC emacs-lisp
     (recentf-mode 1)
     (global-set-key (kbd "C-c f") 'recentf-open-files)
   #+END_SRC


#+BEGIN_SRC emacs-lisp :exports none
(provide 'navigation-settings)
#+END_SRC
