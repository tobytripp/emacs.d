#+SETUPFILE: ~/.emacs.d/org-init/level-0.orgsetup
* Navigation

** Dired

   |---------------+---------------------------------------|
   | Keystroke     | Command                               |
   |---------------+---------------------------------------|
   | C-x d         | Open Dired                            |
   | C-x d <REGEX> | Open Dired filterd by REGEX           |
   | (             | Toggle details                        |
   | A             | Search marked file                    |
   | B             | Byte-compile elisp files              |
   | D             | Delete marked files                   |
   | L             | Load elisp files                      |
   | Q             | Query Replace in marked entries       |
   | R             | Rename                                |
   | T             | Touch marked files                    |
   | X             | Shell Command on files                |
   | Z             | Compress marked files                 |
   | ^             | Go up a directory                     |
   | <             | Previous Dir (in this buffer)         |
   | >             | Next Dir                              |
   | c             | Copy marked files                     |
   | g             | Read all dirs aGain                   |
   | i             | Insert subdirectory into this listing |
   | C-u u         | Un-insert                             |
   | m             | Mark an entry                         |
   | s             | Symlink marked files                  |
   | t             | Toggle marks                          |
   | u             | Unmark file                           |
   | U             | Unmark all files                      |
   | : d           | Decrypt                               |
   | : e           | Encrypt                               |

   Also great is the =wdired= command, which creates a =dired= listing
   that can be edited and saved. This makes for easy renames and file
   mode changes.

*** Dired Extensions

    Built-in:

    #+BEGIN_SRC emacs-lisp
      (require 'dired-x)
    #+END_SRC

*** EXPERIMENTAL dired-hacks
    - State "EXPERIMENTAL" from "TODO"       [2018-03-15 Thu 18:58]

    #+BEGIN_SRC emacs-lisp
      (require-package 'dired-subtree)
      (require 'dired-subtree)
      (if (fboundp 'dired-subtree-insert)
          (define-key dired-mode-map (kbd "i") #'dired-subtree-insert))
      (if (fboundp 'dired-subtree-remove)
          (define-key dired-mode-map (kbd ";") #'dired-subtree-remove))
    #+END_SRC

    #+RESULTS:
    : dired-subtree
*** EXPERIMENTAL neotree

    - State "EXPERIMENTAL" from              [2018-03-24 Sat 11:32]

      #+BEGIN_SRC emacs-lisp
        (require-package 'neotree)
        (autoload 'neotree "neotree" "Directory tree listing")
      #+END_SRC

      #+RESULTS:

** Projectile
   One important note about =projectile= and =flx=: their matching is
   /aggressive/.  This is a nice feature most of the time, except when
   you want to open a new file.  They'll eagerly find you some
   file–any file–that matches the name you're trying to enter.  So, to
   turn this off temporarily press: =C-f=.

   #+BEGIN_SRC emacs-lisp
     (require-package 'f) ;; undeclared dependency?
     (require-package 'projectile)

     (projectile-global-mode)

     (global-set-key   (kbd "C-x f") 'projectile-find-file)

     (global-unset-key (kbd "<f4>"))
     (global-set-key   (kbd "<f4>") 'projectile-find-file)

     (def-projectile-commander-method ?j
       "Jack-in."
       (let* ((opts (projectile-current-project-files))
              (file (ido-completing-read
                     "Find file: "
                     opts
                     nil nil nil nil
                     (car (cl-member-if
                           (lambda (f)
                             (string-match "core\\.clj\\'" f))
                           opts)))))
         (find-file (expand-file-name
                     file (projectile-project-root)))
         (run-hooks 'projectile-find-file-hook)
         (cider-jack-in)))
   #+END_SRC

   The default mode-line “lighter” for Projectile Mode is:

   #+BEGIN_SRC elisp :tangle no
   (:eval
     (format " Projectile[%s]" (projectile-project-name)))
   #+END_SRC

   That's a bit much for me; I like things minimal. So, I reset it to be blank:

   #+BEGIN_SRC elisp
     (setq projectile-mode-line nil)
   #+END_SRC

** Command Completion
** ADOPTED Which-Key Mode

   - State "ADOPTED"    from "REJECTED"   [2017-07-06 Thu 14:31]
   - State "REJECTED"   from "EXPERIMENTAL" [2017-07-06 Thu 14:31]
   - State "EXPERIMENTAL" from              [2017-07-06 Thu 14:31]

   After a short pause, displays command key hints in the mini-buffer.
   #+BEGIN_SRC emacs-lisp
     (require-package 'which-key)
     (which-key-mode)
   #+END_SRC


*** EXPERIMENTAL Ivy + Counsel + Swipe

    - State "EXPERIMENTAL" from "TODO"       [2018-04-03 Tue 08:15]
    - [[https://github.com/abo-abo/swiper][GitHub Page]]

    #+BEGIN_SRC emacs-lisp
      (require-package 'ivy "0.10.0" 'ivy-mode "ivy")
      (require-package 'counsel "20180328.0" 'counsel-mode "counsel")
      (ivy-mode 1)

      (eval-after-load 'ivy
        '(progn
           (counsel-mode 1)
           (setq ivy-use-virtual-buffers t)
           (setq enable-recursive-minibuffers t)
           (global-set-key (kbd "C-c C-r") 'ivy-resume)

           ;; Prevent TAB from selecting only candidate
           (define-key ivy-minibuffer-map (kbd "TAB") 'ivy-partial)

           (setq magit-completing-read-function 'ivy-completing-read)
           (setq projectile-completion-system 'ivy)
     
           (global-set-key "\C-s" 'swiper)
           (setq ivy-re-builders-alist
                 '((swiper . ivy--regex)
                   (t . ivy--regex-plus)))
           ))
    #+END_SRC

    - How to do what C-w does in Isearch?
      #+BEGIN_QUOTE
      In Isearch, pressing =C-w= will insert the word-at-point into the
      minibuffer.

      The same can be done in Ivy with =M-j= =(ivy-yank-word)= for any
      command, not just swiper.

      On a related note, you can paste symbol-at-point into the search with
      =M-n=, which is a common case for using =C-w= in Isearch.
      #+END_QUOTE

*** REJECTED Helm

    + State "REJECTED"   from "EXPERIMENTAL" [2018-04-02 Mon 21:24]
      * Alien navigation
        1. eschews minibuffer
        2. confuses use of TAB
        3. breaks org-refile
    + State "EXPERIMENTAL" from              [2018-03-24 Sat 11:54]

    + Emacs incremental completion and selection narrowing framework
      - [[https://emacs-helm.github.io/helm/][emacs-helm]]
      - Helm dependencies:
        - [[https://github.com/jwiegley/emacs-async][async]]
        - [[https://github.com/auto-complete/popup-el][popup-el]]

    #+BEGIN_SRC emacs-lisp :tangle no
      (add-to-list 'package-pinned-packages
                   '(helm . "melpa-stable") t)
      (require-package 'helm)

      (global-set-key (kbd "M-x") 'helm-M-x)
      (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
      (global-set-key (kbd "C-x C-f") #'helm-find-files)
      (helm-mode 1)

      (setq helm-M-x-fuzzy-match t)
      (setq helm-etags-fuzzy-match t)

      (require-package 'linum-ralative)
      (helm-linum-relative-mode 1)

      (require-package 'helm-company)
      (eval-after-load 'company
        '(progn
           (define-key company-mode-map (kbd "C-:") 'helm-company)
           (define-key company-active-map (kbd "C-:") 'helm-company)))
    #+END_SRC

*** Ido (What I used to use)
    Fuzzy matching is brought in with the =flx= package.
    #+BEGIN_SRC emacs-lisp :tangle no
      (require-package 'flx-ido)
      (require 'flx-ido)

      (ido-mode 1)
      (ido-everywhere 1)
      (flx-ido-mode 1)

      (setq ido-enable-flex-matching t)
      (setq ido-use-faces t)
    #+END_SRC

    [[https://github.com/nonsequitur/smex][SMEX]] shows recently used
    commands on the =M-x= prompt:

    #+BEGIN_QUOTE
    Smex is a M-x enhancement for Emacs. Built on top of Ido, it
    provides a convenient interface to your recently and most
    frequently used commands. And to all the other commands, too.
    #+END_QUOTE

    #+BEGIN_SRC emacs-lisp :tangle no
      (require-package 'smex)
      (smex-initialize)

      (setq smex-save-file (concat user-emacs-directory ".smex-items"))
      (global-set-key (kbd "M-x") 'smex)
      (global-set-key (kbd "C-c x") 'smex-major-mode-commands)

      ;; Make `super` + x the same as Meta-x:
      (global-set-key (kbd "s-x") 'smex)
    #+END_SRC

** Open Recent Files
   Enable “Open Recent” and give it a keybinding:
   #+BEGIN_SRC emacs-lisp
     (recentf-mode 1)
     (global-set-key (kbd "C-c f") 'recentf-open-files)
   #+END_SRC


#+BEGIN_SRC emacs-lisp :exports none
(provide 'navigation-settings)
#+END_SRC
