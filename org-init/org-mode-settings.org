#+SETUPFILE: ~/.emacs.d/org-init/level-0.orgsetup
* ADOPTED Org

  You're looking at it.
** Setup Hooks

   #+BEGIN_SRC emacs-lisp
     (defun toby/org-init ()
       (abbrev-mode t)
       (electric-quote-mode t))

     (add-hook 'org-mode-hook 'toby/org-init)
   #+END_SRC
** Agenda Commands

   Global commands for interacting with =org-mode= and =org-agenda=.

   #+BEGIN_SRC emacs-lisp
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-cb" 'org-iswitchb)
   #+END_SRC

   | Key   | Command        | Action                                     |
   |-------+----------------+--------------------------------------------|
   | C-c l | org-store-link | Store an org-link to the current location. |
   | C-c a | org-agenda     | Open an Org Agenda View                    |
   | C-c b | org-iswitchb   | Switch directly to an org-mode buffer      |

** Org-Babel

   Fontify code blocks in an Org file:
   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
     (require 'ob)

     (add-to-list 'org-babel-tangle-lang-exts '("clojure" . "clj"))
     (add-to-list 'org-babel-tangle-lang-exts '("elixir" . "exs"))

     (defun toby/babel-hook ()
       (condition-case nil
           (org-display-inline-images)
         (error nil)))

     (add-hook 'org-babel-after-execute-hook
               'toby/babel-hook
               'append)

     (require 'ob-shell)
     (require 'ob-ruby)
     (require 'ob-sql)
     (require 'ob-clojure)

     (org-babel-do-load-languages
      'org-babel-load-languages
      '((shell  . t)
        (ruby   . t)
        (sql    . t)
        (elixir . t)))

     (add-to-list 'org-structure-template-alist
                  '("el"  "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"?\">\n\n</src>"))
     (add-to-list 'org-structure-template-alist
                  '("pg"  "#+BEGIN_SRC sql :engine postgresql\n?\n#+END_SRC" "<src lang=\"?\">\n\n</src>"))
   #+END_SRC

   This adds syntax highlighting to org-babel html exports.
   #+BEGIN_SRC emacs-lisp
     (require-package 'htmlize)
     (setq org-export-htmlize-output-type 'css)
   #+END_SRC

   To regenerate syntax highlighting CSS (for the active theme):
   #+BEGIN_SRC emacs-lisp :tangle no
     (org-export-htmlize-generate-css)
   #+END_SRC

   Execute TεΧ and elisp without confirmation:
   #+BEGIN_SRC emacs-lisp
     (defun toby/org-confirm-babel-evaluate (lang body)
       (not (or (string= lang "latex")
                (string= lang "emacs-lisp"))))
     (setq org-confirm-babel-evaluate 'toby/org-confirm-babel-evaluate)
   #+END_SRC

** Org Publish
   [[http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][Org Publish]]

   #+BEGIN_SRC emacs-lisp
     (setq org-publish-project-alist
           `(("Github Site"
              :base-directory       ,(expand-file-name "~/Documents/tobytripp.github.com/org")
              :base-extension       "org"
              :recursive            t
              :publishing-function  org-html-publish-to-html
              :html-preamble ,(concat "<p><a accesskey=\"H\" href=\"index.html\">HOME</a></p>")
              :publishing-directory ,(expand-file-name "~/Documents/tobytripp.github.com/"))
             ("notes"
              :base-directory       ,(expand-file-name "~/Documents/Notes/")
              :base-extension       "org"
              :recursive            t
              :publishing-function  org-html-publish-to-html
              :publishing-directory ,(expand-file-name "~/Documents/Notes/"))
             ("emacs-config"
              :base-directory       ,org-lib-dir
              :base-extension       "org"
              :recursive            t
              :publishing-function  org-html-publish-to-html
              :htmlized-source      t
              :html-preamble ,(concat "<p><a accesskey=\"H\" href=\"index.html\">HOME</a></p>")
              :publishing-directory ,(concat dotfiles-dir "html"))))
   #+END_SRC

   Publish with: =org-publish-project=.

** Calendar and Calendar Integration
   - [[info:emacs#Displaying%20the%20Diary][Emacs Diary]]
     #+BEGIN_SRC emacs-lisp
       (appt-activate 1)
       (add-hook 'diary-list-entries-hook 'diary-sort-entries t)
     #+END_SRC
** Org-Mode Presentations

*** REJECTED Security Vulerabilities in js Dependencies

    - State "REJECTED"   from [2018-02-05 Mon 11:21]

    [[https://github.com/yjwen/org-reveal][Org-Reveal]] is an =org-mode= export extension for creating
    presentations with =reveal.js=.

    #+BEGIN_SRC emacs-lisp :tangle no
      (require-package 'ox-reveal)
      (require 'ox-reveal)

      (setq org-reveal-root
            (concat "file://" (expand-file-name dotfiles-dir)
                    "html/js/reveal.js-3.0.0/js/reveal.js"))

      (add-hook 'org-mode-hook
                (lambda ()
                  ;; (load-library "ox-reveal")
                  (local-set-key (kbd "s-r") 'org-babel-tangle)))

      (defadvice org-html-src-block
        (after toby/wrap-org-html-src-in-code-tag activate)
        (setq ad-return-value (replace-regexp-in-string
                               "\\(<pre[^>]+src-\\([^\"]+\\)\">\\)\\([^<]+\\)</pre>"
                               "\\1<code class=\"\\2\">\\3</code></pre>"
                               ad-return-value)))

      (setq reveal-highlight-theme "zenburn")

      (defadvice org-reveal-stylesheets
        (after toby/add-highlight-styles (info) activate)
        "Add stylesheet declaration for highlight.js formatting"
        (let* ((root-path (plist-get info :reveal-root))
               (css-path (concat root-path "/plugin/highlight/styles")))
          (setq ad-return-value
                (concat ad-return-value
                        (format "<link rel=\"stylesheet\" href=\"%s\">\n"
                                (concat css-path "/" reveal-highlight-theme ".css"))))))
    #+END_SRC

** TODO Custom bullets with =org-bullets=
   - State "TODO"       from "EXPERIMENTAL" [2018-02-23 Fri 13:50]
   - State "EXPERIMENTAL" from              [2018-02-10 Sat 06:41]

   #+BEGIN_SRC emacs-lisp
   (require-package 'org-bullets)
   #+END_SRC

   * [[https://zhangda.wordpress.com/2016/02/15/configurations-for-beautifying-emacs-org-mode/][Example configurations]]

** COMMENT Package declaration

 #+BEGIN_SRC emacs-lisp :exports none
 (provide 'org-mode-settings)
 #+END_SRC

